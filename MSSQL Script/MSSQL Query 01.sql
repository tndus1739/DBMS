-- 한 줄 주석

/* 
		여러 줄 주석
*/

-- 1. 사용자 DB 생성

create database myDB ;

--2. 사용자 DB에 연결
use myDB;                     -- 항상 연결을 해줘야 한다.

-- 3. myDB에서 테이블 생성
/*
		- Oracle                : 정수 number(4) , 실수 number (7,2)      ,  문자열 varchar2(50)
		- MSSQL , MySQL  : 정수 ( int ) ,        실수 ( float )  , 문자열 varchar(50) 
			- MySQL : double
			- MSSQL : real
*/



create table emp01 (
	eno int not null constraint PK_EMP01_ENO primary key ,
	ename varchar(50) not null,
	salary float not null,
	hiredatae date,
	dno int
);


/*

	객체의 전체 이름 : DB , 테이블명 , 뷰명 , 저장프로시져명 , 함수가 될 수 있다
	dbo : 생략가능

	DB명 . 스키마명 . 객체이름

*/

select * from myDb.dbo.emp01 ;     --  emp01 테이블의 전체 이름 ( mtDB 생략가능 , dbo 생략가능)

select * from emp01 ; 


/*
		- Oracle  : 데이터 사전 ( user_*) 과 같이 시스템의 정보를 출력 , sp_*
		- MSSQL : sp_helpdb ;    시스템의 모든 DB 정보를 출력 -->  MSSQL에만 있음
						 sp_help '스키마명 , 테이블명 ' :  --> 테이블의 정보를 출력 ( 스키마이름을 같이 입력해야 한다)

*/

sp_helpdb ;

sp_help 'dbo.emp01' ;   --> desc emp01 , select * from user_constraints where table_name in ( 'EMP01') ; 의 2개의 명령어가 합쳐짐

-- 4. 값넣기 : MSSQL은 자동으로 커밋 트랜잭션 ( insert , update , delete )

insert into  emp01 ( eno , ename , salary , hiredatae , dno )     -- 자동으로 커밋
values ( 1, '홍길동' , 500 , '81-01-01' , 10);


insert into  emp01 ( eno , ename , salary , hiredatae , dno )
values ( 2, '이길동' , 1000 , '91-01-01' , 20);

insert into  emp01 ( eno , ename , salary , hiredatae , dno )
values ( 3, '김길동' , 2000 , '22-03-10' , 30);


-- 5. 값 넣을 때 명시적으로 트랜잭션을 시작했으면 rollback 이나 commit을 해줘야 함   -- ALL or Nothing

-- 홍길동 월급에서 30억 출금해서 김길동 월급으로 입금

begin transaction ;    -- 트랜잭션 시작

-- 홍길동 계좌에서 30억 출금
update emp01
set salary = salary - 30 
where eno = 1 ; 

-- 이길동 계좌에서 30억 입금
update emp01
set salary = salary + 30 
where eno = 2 ; 


rollback ;     -- 명시적으로 트랜잭션을 시작해야  rollback 이나 commit을 할 수 있다. 
commit ;

select * from emp01 ;

-- delete
delete emp01
where eno =1 ;


-- 부서 테이블 : dept01
create table dept01 (
	dno int not null constraint PK_DEPT01_DNO primary key,
	dname varchar(50) not null , 
	loc varchar(50) null
	);

select * from dept01 ;
sp_help 'dbo.dept01' ;

insert into dept01 
values ( 10 , '인사부' , '서울');

insert into dept01 
values ( 20 , '관리부' , '부산');

insert into dept01 
values ( 30 , '영업부' , '제주');

select * from emp01 ;      -- 두 테이블을 한 번에 드래그해서 출력하면 한 번에 두개의 테이블에 출력 가능
select * from dept01 ;

-- alter table 을 사용해서  emp01(dno) : FK   --> dept01 (dno)

alter table emp01
add constraint FK_EMP01_DNO foreign key (dno) references dept01 (dno);

sp_help 'dbo.emp01' ;        -- 테이블 구조 보기

-- JOIN : ANSI JOIN  - INNER JOIN   --> ERD ( DB 내의 테이블과 테이블의 관계)

select * 
	from emp01 e
		join dept01 d
		  on e.dno = d.dno ;

-- 부서가 적용되어 있지 않은 부서를 출력 : Right Outer Joim 

select *
from emp01 e
		right outer join dept01 d
			on e.dno = d.dno ;
